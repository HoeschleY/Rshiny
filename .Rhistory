geom_bar(stat = "identity") +
scale_fill_manual(values = c("dimanche" = "blue", "jeudi" = "gray",
"lundi" = "gray", "mardi" = "gray",
"mercredi" = "gray" , "samedi" = "blue" , "vendredi" = "gray")) +
theme_minimal() +
labs(title = "Temps de trajet moyen par jour(Clients réguliers)",
x = "Jours",
y = "Temps en secondes")
View(moyenne_member_casual)
View(moyenne_member_casual)
moyenne_member_casual_jours <- Trips_2020_cleaned %>%
group_by(member_casual,day) %>%
summarise(moy = mean(time_sec)) %>%
arrange(-moy)
View(moyenne_member_casual_jours)
View(moyenne_member_casual_jours)
ggplot(data = moyenne_member_casual_jours , aes(x = day , y = moy)) +
geom_jitter(stat = "identity") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
ggplot(data = moyenne_member_casual_jours , aes(x = day , y = moy , color = member_casual)) +
geom_jitter(stat = "identity") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
ggplot(data = moyenne_member_casual_jours , aes(x = day , y = moy , color = member_casual)) +
geom_bar(stat = "identity") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
data("penguins")
View(penguins)
ggplot(data = penguins) +
geom_jitter(mapping
= aes(x = flipper_length_mm,
y = body_mass_g,
color = species))
ggplot(data = moyenne_member_casual_jours , aes(x = day , y = moy , color = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
ggplot(data = moyenne_member_casual_jours , aes(as.factor(day) , fill=as.factor(moy))) +
geom_bar(position = "dodge") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
ggplot(data = moyenne_member_casual_jours , aes(as.factor(moy) , fill=as.factor(day))) +
geom_bar(position = "dodge") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
ggplot(data = moyenne_member_casual_jours , aes(as.factor(day) , fill=as.factor(member_casual))) +
geom_bar(position = "dodge") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
ggplot(data = moyenne_member_casual_jours , aes(y = moy , as.factor(day) , fill=as.factor(member_casual))) +
geom_bar(position = "dodge") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
ggplot(data = moyenne_member_casual_jours , aes(x = day , y = moy , fill=as.factor(member_casual))) +
geom_bar(position = "dodge") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
ggplot(data = moyenne_member_casual_jours , aes(x = day , y = moy , fill=as.factor(member_casual))) +
geom_bar(position=position_dodge(), stat="identity") +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
ggplot(data = moyenne_member_casual_jours , aes(x = day , y = moy , fill=as.factor(member_casual))) +
geom_bar(position=position_dodge(), stat="identity") +
theme_minimal() +
labs(title = "Comparaison temps de trajet moyen par jour (Clients occasionnels et réguliers)",
x = "Jours",
y = "Temps en secondes")
View(Trips_2020_cleaned)
View(Trips_2020_cleaned)
Trips_2020_cleaned %>% group_by(ride_id)
tri_station <- Trips_2020_cleaned %>%
group_by(started_at,ended_at)
View(tri_station)
View(tri_station)
View(tri_station)
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name,end_station_name)
View(tri_station)
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name,end_station_name) %>%
summarise(nb_trajet = count())
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name,end_station_name) %>%
summarise(nb_trajet = count(time_sec))
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name,end_station_name) %>%
summarise(nb_trajet = count(ride_id))
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name)
View(tri_station)
View(tri_station)
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name) %>%
summarise(moy = mean(time_sec))
View(tri_station)
View(tri_station)
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name) %>%
summarise(nb_trajets = n_distinct(ride_id))
View(tri_station)
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name) %>%
summarise(nb_trajets = n_distinct(ride_id)) %>%
arrange(-nb_trajets)
View(tri_station)
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name,end_station_name) %>%
summarise(nb_trajets = n_distinct(ride_id)) %>%
arrange(-nb_trajets)
View(tri_station)
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_id,end_station_id) %>%
summarise(nb_trajets = n_distinct(ride_id)) %>%
arrange(-nb_trajets)
View(tri_station)
glimpse(tri_station)
tri_station <- Trips_2020_cleaned %>%
group_by(start_station_name,end_station_name) %>%
summarise(nb_trajets = n_distinct(ride_id)) %>%
arrange(-nb_trajets)
View(tri_station)
unlink("Administratif/Travail/PoleEmploi/GoogleCertificate/Etude_de_cas_velos/etude_de_cas_velos_cache", recursive = TRUE)
install.packages('lubridate')
library('lubridate')
#Importation de données
#1
neuf <- read.csv("https://raw.githubusercontent.com/asardell/IUT_SD2/refs/heads/main/data/dpe-v2-logements-neufs.csv", header = TRUE, dec = ".", sep = ",")
ancien<- read.csv("https://raw.githubusercontent.com/asardell/IUT_SD2/refs/heads/main/data/dpe-v2-logements-existants.csv", header = TRUE, dec = ".", sep = ",")
#3
dim(ancien) #16069 242
dim(neuf) #2851 220
#4
col_communes = intersect(colnames(ancien),colnames(neuf))
#5
neuf$Année_construction = 2024
#6
df = rbind(ancien[ , col_communes], neuf[ , col_communes])
#7
df$annee <- as.numeric(substr(df$Date_réception_DPE,1,4))
#8
df$verif_cout <- df$Coût_total_5_usages == df$Coût_chauffage
+ df$Coût_éclairage
+ df$Coût_ECS
+ df$Coût_refroidissement
+ df$Coût_auxiliaires
#9
df$Coût_chaufage_en_pourcent <- df$Coût_chauffage / df$Coût_total_5_usages*100
#10 AFINIR
df$Periode_construction <- cut(df$annee, breaks=c(1960,1970,1980,1990,2000,2010), labels = c("Avant 1960","1961-1970","1971-1980","1981-1990","1991-2000","2001-2010","Après2010"))
source("~/BUT2/R shiny/TP/Chapitre1.R")
#Importation de données
#1
neuf <- read.csv("https://raw.githubusercontent.com/asardell/IUT_SD2/refs/heads/main/data/dpe-v2-logements-neufs.csv", header = TRUE, dec = ".", sep = ",")
ancien<- read.csv("https://raw.githubusercontent.com/asardell/IUT_SD2/refs/heads/main/data/dpe-v2-logements-existants.csv", header = TRUE, dec = ".", sep = ",")
#3
dim(ancien) #16069 242
dim(neuf) #2851 220
#4
col_communes = intersect(colnames(ancien),colnames(neuf))
#5
neuf$Année_construction = 2024
#6
df = rbind(ancien[ , col_communes], neuf[ , col_communes])
#7
df$annee <- as.numeric(substr(df$Date_réception_DPE,1,4))
#8
df$verif_cout <- df$Coût_total_5_usages == df$Coût_chauffage
+ df$Coût_éclairage
+ df$Coût_ECS
+ df$Coût_refroidissement
+ df$Coût_auxiliaires
#9
df$Coût_chaufage_en_pourcent <- df$Coût_chauffage / df$Coût_total_5_usages*100
#10 AFINIR
df$Periode_construction <- cut(df$annee, breaks=c(1960,1970,1980,1990,2000,2010), labels = c("Avant 1960","1961-1970","1971-1980","1981-1990","1991-2000","2001-2010","Après2010"))
#Importation de données
#1
neuf <- read.csv("https://raw.githubusercontent.com/asardell/IUT_SD2/refs/heads/main/data/dpe-v2-logements-neufs.csv", header = TRUE, dec = ".", sep = ",")
ancien<- read.csv("https://raw.githubusercontent.com/asardell/IUT_SD2/refs/heads/main/data/dpe-v2-logements-existants.csv", header = TRUE, dec = ".", sep = ",")
#3
dim(ancien) #16069 242
dim(neuf) #2851 220
#4
col_communes = intersect(colnames(ancien),colnames(neuf))
#5
neuf$Année_construction = 2024
#6
df = rbind(ancien[ , col_communes], neuf[ , col_communes])
#7
df$annee <- as.numeric(substr(df$Date_réception_DPE,1,4))
#8
df$verif_cout <- df$Coût_total_5_usages == df$Coût_chauffage
+ df$Coût_éclairage
+ df$Coût_ECS
+ df$Coût_refroidissement
+ df$Coût_auxiliaires
#9
df$Coût_chaufage_en_pourcent <- df$Coût_chauffage / df$Coût_total_5_usages*100
#10 AFINIR
df$Periode_construction <- cut(df$annee, breaks=c(1960,1970,1980,1990,2000,2010), labels = c("Avant 1960","1961-1970","1971-1980","1981-1990","1991-2000","2001-2010","Après2010"))
df$Periode_construction <- cut(df$annee, breaks=c(0,1960,1970,1980,1990,2000,2010), labels = c("Avant 1960","1961-1970","1971-1980","1981-1990","1991-2000","2001-2010","Après2010"))
is.numeric(df$annee)
df$annee
df$Periode_construction <- cut(df$annee, breaks=c(0,1960,1970,1980,1990,2000,2010),include.lowest = TRUE, labels = c("Avant 1960","1961-1970","1971-1980","1981-1990","1991-2000","2001-2010","Après2010"))
df$Periode_construction <- cut(df$annee, breaks=c(0,1960,1970,1980,1990,2000,2010), labels = c("Avant 1960","1961-1970","1971-1980","1981-1990","1991-2000","2001-2010","Après2010"), right = FALSE,left = FALSE)
df$Periode_construction <- cut(df$annee, breaks=c(1960,1970,1980,1990,2000,2010), labels = c("Avant 1960","1961-1970","1971-1980","1981-1990","1991-2000","2001-2010","Après2010"), right = FALSE,left = FALSE)
df$Periode_construction <- cut(df$annee, breaks=c(1960,1970,1980,1990,2000,2010),include.lowest = TRUE, labels = c("Avant 1960","1961-1970","1971-1980","1981-1990","1991-2000","2001-2010","Après2010"), right = FALSE,left = FALSE)
df$Periode_construction <- cut(df$annee,
breaks = c(1960, 1970, 1980, 1990, 2000, 2010, Inf),
include.lowest = TRUE,
labels = c("Avant 1960", "1961-1970", "1971-1980", "1981-1990", "1991-2000", "2001-2010", "Après 2010"),
right = FALSE)
df$Periode_construction <- cut(df$annee,
breaks = c(1960, 1970, 1980, 1990, 2000, 2010, 2020),
include.lowest = TRUE,
labels = c("Avant 1960", "1961-1970", "1971-1980", "1981-1990", "1991-2000", "2001-2010", "Après 2010"),
right = FALSE)
df$Periode_construction <- cut(df$annee,
breaks = c(1960, 1970, 1980, 1990, 2000, 2010, Inf),
include.lowest = TRUE,
labels = c("1961-1970", "1971-1980", "1981-1990", "1991-2000", "2001-2010", "Après 2010"),
right = FALSE)
df$Periode_construction
View(df)
View(df)
df$repartition_Etiquette_DPE <- table(df$Etiquette_DPE)
table(df$Etiquette_DPE)
table(df$Date_réception_DPE)
View(df)
View(df)
View(ancien)
View(ancien)
View(neuf)
View(neuf)
table(df$Modèle_DPE)
colnames(df)
table(df$Type_bâtiment)
table(df$Type_installation_chauffage)
prop.table(table)
table(df$Type_installation_chauffage)
table(df$Periode_construction)
table_chauff <- table(df$Type_installation_chauffage)
prop_tabl_chauf <- prop_table(table_chauff) * 100
table_chauff <- table(df$Type_installation_chauffage)
prop_tabl_chauf <- prop.table(table_chauff) * 100
print(prop_tabl_chauf)
moy(df$Surface_habitable_logement)
avg(df$Surface_habitable_logement)
mean(df$Surface_habitable_logement)
mean(df$Surface_habitable_logement)
print df$Surface_habitable_logement
print(df$Surface_habitable_logement)
mean(df$Surface_habitable_logement)
lenght(df$Surface_habitable_logement)
length(df$Surface_habitable_logement)
mean(df$Surface_habitable_logement,na.rm = T)
mean(df$Surface_habitable_logement)
mean(df$Coût_chauffage,na.rm=T)
quantile(df$Coût_ECS,c(0.25,0.75),na.rm=T)
quantile(df$Coût_ECS,c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9),na.rm = T)
corrélation <- cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage , method = "spearman")
corrélation <- cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage,na.rm=T)
corrélation <- cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage)
corrélation <- cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage)
corrélation
corrélation <- cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage, method = "spearman")
corrélation
cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage, method = "spearman")
cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage, method = "spearman")
head(df)
install.packages('corrplot')
library('corrplot')
head(df)
M <- cor(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages)
M <- cor(df)
head(mtcars)
M <- cor(df)
M <- cor(c(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages))
M <- cor(cbind(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages))
head(round(M,2))
corrplot(M,method="circle")
M <- cor(cbind(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages))
corrplot(M,method="circle")
M <- cor(cbind(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages))
head(round(M,2))
corrplot(M,method="circle")
colnames(df)
filter(df,Type_bâtiment = "appartement" )
filter(df,Type_bâtiment == "appartement" )
filter(df,df$Type_bâtiment == "appartement" )
appartements <- filter(df,df$Type_bâtiment == "appartement" )
appartements
print(appartement)
print(appartements)
appartements <- filter(df,Type_bâtiment == "appartement" )
print(df$Type_bâtiment)
appartements <- filter(df,Type_bâtiment == "appartement" )
typeof(df)
dataframe -> as.data.frame(df)
dataframe <- as.data.frame(df)
appartements <- filter(dataframe,Type_bâtiment == "appartement" )
View(df)
View(dataframe)
appartements <- filter(dataframe,Type_batiment == "appartement" )
colnames(dataframe)
appartements <- filter(dataframe,Type_bâtiment == "appartement" )
appartements <- filter(df,df$Type_bâtiment == "appartement" )
print(appartements)
appartements <- filter(dd,17 == "appartement" )
appartements <- filter(df,17 == "appartement" )
print(appartements)
appartements <- filter(df, Etiquette_DPE == "A" )
appartements <- filter(df, df$Etiquette_DPE == "A" )
print(appartements)
etiquette_DPE <- filter(df, df$Etiquette_DPE == "D" || df$Etiquette_DPE == "E" || df$Etiquette_DPE == "F" || df$Etiquette_DPE == "G")
df %>% filter(df$Etiquette_DPE == "D" || df$Etiquette_DPE == "E" || df$Etiquette_DPE == "F" || df$Etiquette_DPE == "G")
filter(df$Etiquette_DPE == "D" || df$Etiquette_DPE == "E" || df$Etiquette_DPE == "F" || df$Etiquette_DPE == "G")
appartements <- Filter(df,Type_bâtiment == "appartement")
appartements <- Filter(dataframe,Type_bâtiment == "appartement")
appartements <- filter(dataframe,Type_bâtiment == "appartement")
colnames(df)
colnames(df) <- make.names(colnames(df), unique = TRUE)
colnames(df)
appartements <- filter(dataframe,Type_bâtiment == "appartement")
appartements <- filter(dataframe,'Type_bâtiment' == "appartement")
print(appartements)
appartements <- filter(df,'Type_bâtiment' == "appartement")
print(appartements)
etiquette_DPE <- filter(df,'Etiquette_DPE' == "D,E,F,G")
print(etiquette_DPE)
etiquette_DPE <- filter(df,'Etiquette_DPE' == "D" |'Etiquette_DPE' == "E" | 'Etiquette_DPE' == "F" | 'Etiquette_DPE' == "G" )
print(etiquette_DPE)
colnames(df)
avant_1960 <- filter(df,'Periode_construction' == "Avant 1960")
print(avant_1960)
appartements <- filter(data=df,'Type_bâtiment' == "appartement")
etiquette_DPE <- filter(data=df,'Etiquette_DPE' == "D" |'Etiquette_DPE' == "E" | 'Etiquette_DPE' == "F" | 'Etiquette_DPE' == "G" )
df_trie <- arrage(df,desc(Conso_5_usages.m._é_finale))
df_trie <- arrange(df,desc(Conso_5_usages.m._é_finale))
df_trie <- arrange(df,desc('Conso_5_usages.m._é_finale'))
install.packages('dyplyr')
library('dplyr')
df_trie <- arrange(df,desc('Conso_5_usages.m._é_finale'))
print(df_trie)
avant_1960 <- filter(df,'Periode_construction' == "Avant 1960")
print(avant_1960)
appartements <- filter(df,'Type_bâtiment' == "appartement")
print(appartements)
#2
etiquette_DPE <- filter(df,'Etiquette_DPE' == "D" |'Etiquette_DPE' == "E" | 'Etiquette_DPE' == "F" | 'Etiquette_DPE' == "G" )
print(etiquette_DPE)
df_trie1 <- arrange(df,Etiquette_DPE,Periode_construction,desc(Coût_chauffage))
print(df_trie1)
cout_moyen_etiquette <- aggregate(Coût_chauffage~etiquette_DPE,df, FUN = mean)
cout_moyen_etiquette <- aggregate(Coût_chauffage~Etiquette_DPE,df, FUN = mean)
print(cout_moyen_etiquette)
# Exo 2
# 1.
# La population est l'ensemble d'étudiants.
# Les échantillons sont les garçons et les filles
# La variable est une longueur en cm, elle
# est quantitative continue.
# 2.
garçons <- c(9.2,9.6,9.7,9.7,9.8,10.5,10.5,10.5,11.5,12.4,13.2,13.7)
filles <- c(10.4,10.5,10.8,11.1,11.8,12.9,13.2,13.4,14.2,14.5)
moy_g = mean(garçons)
moy_f = mean(filles)
alpha = 0.05
n_g = length(garçons)
n_f = length(filles)
# a)
IC_g_gauche = moy_g - qnorm(1-alpha/2)*sqrt(2.20)/sqrt(n_g)
IC_g_droite = moy_g + qnorm(1-alpha/2)*sqrt(2.20)/sqrt(n_g)
IC_g_gauche
IC_g_droite
IC_f_gauche = moy_f - qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
Sigma_f = sqrt(2.4)
IC_f_gauche = moy_f - qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_droite = moy_f + qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_gauche
IC_f_droite
# On a donc un
# Exo 2
# 1.
# La population est l'ensemble d'étudiants.
# Les échantillons sont les garçons et les filles
# La variable est une longueur en cm, elle
# est quantitative continue.
# 2.
garçons <- c(9.2,9.6,9.7,9.7,9.8,10.5,10.5,10.5,11.5,12.4,13.2,13.7)
filles <- c(10.4,10.5,10.8,11.1,11.8,12.9,13.2,13.4,14.2,14.5)
moy_g = mean(garçons)
moy_f = mean(filles)
alpha = 0.05
n_g = length(garçons)
n_f = length(filles)
Sigma_g = sqrt(2.2)
Sigma_f = sqrt(2.4)
# a)
IC_g_gauche = moy_g - qnorm(1-alpha/2)*Sigma_g/sqrt(n_g)
IC_g_droite = moy_g + qnorm(1-alpha/2)*Sigma_g/sqrt(n_g)
IC_g_gauche
IC_g_droite
# On a donc un IC pour moy_g =
# IC = ] 10.01913 ; 11.69754 [
IC_f_gauche = moy_f - qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_droite = moy_f + qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_gauche
IC_f_droite
# On a donc un IC pour moy_f =
# IC = ] 11.31982 ; 13.24018 [
diff_moy = moy_g - moy_f
alpha1 = 0.1
IC_gf_gauche = diff_moy - qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_droite = diff_moy - qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_gauche
IC_gf_droite
diff_moy = moy_g - moy_f
alpha1 = 0.1
IC_gf_gauche = diff_moy - qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_droite = diff_moy + qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_gauche
IC_gf_droite
moy_g
moy_f
diff_moy
t.test(garçons,conf.level = 0.95)$conf.int
t.test(filles,conf.level = 0.95)$conf.int #
t.test(garçons,conf.level = 0.95, var.equal=T)$conf.int # 9.902987 11.813679
t.test(filles,conf.level = 0.95, var.equal=T)$conf.int # 11.17136 13.38864
install.packages("EnvStats")
library("EnvStats")
varTest(garçons,conf.level=0.95)$conf.int #
varTest(filles,conf.level = 0.95)$conf.int
p_g = filter(garçons>13&&garçons<11)
garçons_filtre = garçons[garçons>13&&garçons<11]
garçons_filtre = garçons[garçons>13,garçons<11]
garçons_filtre = garçons[garçons>13]
garçons_filtre
garçons_filtre = garçons[garçons>13 & garcons<11]
garçons_filtre = garçons[garçons>13 & garçons<11]
garçons_filtre
garçons_filtre <- garçons[garçons>13 & garçons<11]
garçons_filtre
print[garçons_filtre]
garçons_filtre
garçons_filtre
print(garçons_filtre)
garçons_filtre <- garçons[garçons>13 & garçons<11]
garçons_filtre <- garçons[garçons>13 || garçons<11]
garçons_filtre <- garçons[garçons>13 | garçons<11]
print(garçons_filtre)
filles_filtre <- filles[filles>13 | filles<11]
print(filles_filtre)
p_g = garçons_filtre/n_g
p_f = filles_filtre/n_f
p_g
p_f
p_g = length(garçons_filtre)/n_g
p_f = length(filles_filtre)/n_f
p_g
p_f
(garçon>13)
(garçons>13)
ICp_g_gauche = p_g - qnorm(1-alpha/2) * sqrt(p_g(1-p_g)/n_g)
ICp_g_gauche = p_g - qnorm(1-alpha/2) * sqrt(p_g*(1-p_g)/n_g)
ICp_g_droite = p_g + qnorm(1-alpha/2) * sqrt(p_g*(1-p_g)/n_g)
ICp_f_gauche = p_f - qnorm(1-alpha/2) * sqrt(p_f*(1-p_f)/n_f)
ICp_f_droite = p_f + qnorm(1-alpha/2) * sqrt(p_f*(1-p_f)/n_f)
ICp_g_gauche
ICp_g_droite
ICp_f_gauche
ICp_f_droite
install.packages('epitools')
library('epitools')
#première fonction(Méthode 1)
prop.test(n_g*p_g,n_g,conf.level=0.95)$conf.int
Borne_gauche_d_prop=(p_g-p_f)-(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_droite_d_prop=(p_g-p_f)+(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_gauche_d_prop;Borne_droite_d_prop
diff_prop <- p_g-p_f
diff_prop
shiny::runApp('BUT2/R shiny/R shiny/Rshiny')
library(shiny)
library(httr)
library(jsonlite)
library(reactable)
library(ggplot2)
library(jpeg)
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
library(dplyr)
runApp('BUT2/R shiny/R shiny/Rshiny')
setwd("~/BUT2/R shiny/R shiny/Rshiny")
runApp()
runApp()
runApp()
runApp()
runApp()
